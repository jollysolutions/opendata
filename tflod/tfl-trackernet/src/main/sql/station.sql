-- ----------------------------------------------------------------------
-- TrackerNet
--
-- ----------------------------------------------------------------------

--CREATE SCHEMA tfl;
SET search_path = tfl;

DROP TABLE platform;
DROP TABLE station;
DROP TABLE crs;

-- ----------------------------------------------------------------------
-- London Underground Station CRS Codes
-- ----------------------------------------------------------------------

CREATE TABLE crs (
    id      SERIAL NOT NULL,
    -- CRS code. First 3 chars of station code
    crs     CHAR(3) NOT NULL,
    -- Station code. Normally crs but for PAD we have PADc and PADs
    code    NAME NOT NULL,
    name    NAME NOT NULL,
    PRIMARY KEY (id)
);
CREATE INDEX crs_c1 ON crs(crs);
CREATE UNIQUE INDEX crs_c2 ON crs(code);
CREATE INDEX crs_cc ON crs(crs,code);
CREATE INDEX crs_n ON crs(name);

CREATE OR REPLACE FUNCTION tfl.crs (pcrs TEXT)
RETURNS INTEGER AS $$
DECLARE
    rec     RECORD;
BEGIN
    RETURN tfl.crs(pcrs,pcrs);
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION tfl.crs (pcode TEXT, pname TEXT)
RETURNS INTEGER AS $$
DECLARE
    rec     RECORD;
BEGIN
    LOOP
        SELECT * INTO rec FROM tfl.crs WHERE code=pcode;
        IF FOUND THEN
            RETURN rec.id;
        END IF;
        BEGIN
            INSERT INTO tfl.crs (crs,code,name)
                VALUES (
                    substring(pcode,1,3),
                    pcode,
                    pname
                );
            RETURN currval('tfl.crs_id_seq');
        EXCEPTION WHEN unique_violation THEN
            -- Do nothing, loop & try again
        END;
    END LOOP;
END;
$$ LANGUAGE plpgsql;

-- ----------------------------------------------------------------------
-- Platforms
-- ----------------------------------------------------------------------

CREATE TABLE platform (
    id      SERIAL NOT NULL,
    -- Station CRS code
    crsid   INTEGER NOT NULL REFERENCES tfl.crs(id),
    -- Platform number, generated by insert function
    plat    INTEGER NOT NULL DEFAULT 0,
    -- Platform name as defined by TfL
    name    NAME NOT NULL,
    -- Code, number similar to plat but based on line not station
    code    INTEGER NOT NULL,
    PRIMARY KEY (id)
);
CREATE INDEX platform_c ON platform(crsid);
CREATE UNIQUE INDEX platform_cn ON platform(crsid,name);

-- Function to retrieve and insert as necessary
CREATE OR REPLACE FUNCTION tfl.platform (pcrsid INTEGER, pname TEXT, pcode INTEGER)
RETURNS INTEGER AS $$
DECLARE
    rec     RECORD;
    aplat   INTEGER;
BEGIN
    LOOP
        SELECT * INTO rec FROM tfl.platform WHERE crsid=pcrsid AND name=pname;
        IF FOUND THEN
            RETURN rec.id;
        END IF;

        -- Try to extract the platform number at the station.
        -- TfL seems to put it at the end of the platform name
        aplat = 0;
        BEGIN
            aplat = substring(pname FROM '.{2}$')::INTEGER;
        EXCEPTION WHEN invalid_text_representation THEN
            -- Invalid so set to 0
            aplat = 0;
        END;

        BEGIN
            INSERT INTO tfl.platform (crsid,plat,name,code)
                VALUES (pcrsid,aplat,pname,pcode);
            RETURN currval('tfl.platform_id_seq');
        EXCEPTION WHEN unique_violation THEN
            -- Do nothing, loop & try again
        END;
    END LOOP;
END;
$$ LANGUAGE plpgsql;

-- ----------------------------------------------------------------------
-- Links a station to a line
-- ----------------------------------------------------------------------

CREATE TABLE station (
    lineid  INTEGER NOT NULL REFERENCES tfl.line(id),
    crsid   INTEGER NOT NULL REFERENCES tfl.crs(id),
    PRIMARY KEY (lineid,crsid)
);
CREATE INDEX station_l ON station(lineid);
CREATE INDEX station_c ON station(crsid);

-- Returns station(id) for a station on a specific line
CREATE OR REPLACE FUNCTION tfl.station (pline TEXT, pcode TEXT, pname TEXT)
RETURNS INTEGER AS $$
DECLARE
    rec     RECORD;
    alineid  INTEGER;
    acrsid   INTEGER;
BEGIN
    alineid = tfl.line(pline);
    acrsid = tfl.crs(pcode,pname);
    
    LOOP
        SELECT * INTO rec FROM tfl.station WHERE lineid=alineid AND crsid=acrsid;
        IF FOUND THEN
            RETURN rec.crsid;
        ELSE
            BEGIN
                INSERT INTO tfl.station (lineid,crsid) VALUES (alineid,acrsid);

                RETURN acrsid;
            EXCEPTION WHEN unique_violation THEN
                -- Do nothing, loop & try again
            END;
        END IF;
    END LOOP;
END;
$$ LANGUAGE plpgsql;
